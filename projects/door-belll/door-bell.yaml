esphome:
  name: door-bell
  on_boot: 
    priority: 100
    then:
        - dfplayer.reset
        - delay: 
            seconds: 1
        - dfplayer.set_volume: !lambda return id(doorbell_track_volume).state;
        - lambda: |-
            id(doorbell_alarm_timeout) = id(doorbell_alarm_timeout_n).state;
#            id(doorbell_random) = false;
#            auto call1 = id(doorbell_track).make_call();
#            call1.set_value( id(doorbell_val_track) );
#            call1.perform();
#            ESP_LOGD("main", "T1=%d T2=%d", id(doorbell_val_track), id(doorbell_track).state);
#            auto call2 = id(doorbell_track_volume).make_call();
#            call2.set_value( id(doorbell_val_volume) );
#            call2.perform();
#            ESP_LOGD("main", "V1=%d V2=%d", id(doorbell_val_volume), id(doorbell_track_volume).state);


esp8266:
  board: esp12e
  restore_from_flash: True


# Enable logging
logger:

# Enable Home Assistant API

ota:
  - platform: esphome
    password: "e1cce0b1836c69a9647e47a9974c2be3"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Door-Bell Hotspot"
    password: !secret wifi_password

captive_portal:

web_server:
  port: 80

mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_user
  password: !secret mqtt_pass

globals:
  - id: doorbell_random
    type: bool
    restore_value: True
  - id: doorbell_alarm
    type: bool
    restore_value: False
  - id: doorbell_play_track
    type: int
  - id: doorbell_alarm_timeout
    type: float
#    restore_value: True




binary_sensor:
  - platform: gpio
    name: "Button"
    icon: mdi:doorbell
    pin:
      number: GPIO4
      inverted: true
      mode: 
        input: True
        pullup: True
    on_press: 
      then:
        - script.execute: play_track
#    on_double_click: 
#      then:
#        - lambda: |-
#            auto call = id(doorbell_track).make_call();
#            call.set_value( rand() % 60 );
#            call.perform();




text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
#    scan_results:
#      name: ESP Latest Scan Results
  - platform: template
    name: "Track"
    lambda: 'return to_string(id(doorbell_play_track));'



script:

  - id: play_track
    then:
      - if: 
          condition: 
            lambda: 'if (id(doorbell_alarm)) return false; else return true;'
          then: 
            - if: 
                condition: 
                  lambda: 'return id(doorbell_random);'
                then:
                  - dfplayer.play: !lambda return id(doorbell_play_track) = rand() % 60; 
                else: 
                  - dfplayer.play: !lambda return id(doorbell_play_track) = id(doorbell_track).state;                   

  - id: play_alarm
    then:
      - if: 
          condition: 
            lambda: 'return id(doorbell_alarm);'
          then:
            - dfplayer.play:
                file: !lambda return id(doorbell_alarm_track).state;
                loop: True
            - delay: 
                seconds: 1
            - dfplayer.set_volume: !lambda return id(doorbell_alarm_volume).state;
            - wait_until:
                condition:
                  lambda: 'if (id(doorbell_alarm)) return false; else return true;'
                timeout: !lambda 'return id(doorbell_alarm_timeout) * 1000;'
            - logger.log: "Timeout Ok"
            - script.execute: play_reset
          else: 
            - script.execute: play_reset

  - id: play_reset
    then:
      - dfplayer.reset
      - delay: 
          seconds: 1
      - dfplayer.set_volume: !lambda id(doorbell_alarm) = false; return id(doorbell_track_volume).state;




switch:
  - platform: template
    name: "Play random"
    icon: mdi:animation-play
    id: doorbell_random_switch
    lambda: |-
      if (id(doorbell_random)) {
        return true;
      } else {
        return false;
      }    
    turn_on_action: 
      then:
        - lambda: |-
            id(doorbell_random) = true;
        - script.execute: play_track
    turn_off_action: 
      then:
        - lambda: |-
            id(doorbell_random) = false;
        - script.execute: play_track

  - platform: template
    name: "Alarm play"
    icon: mdi:animation-play
    id: doorbell_alarm_switch
    lambda: |-
      if (id(doorbell_alarm)) {
        return true;
      } else {
        return false;
      }    
    turn_on_action: 
      then:
        - lambda: |-
            id(doorbell_alarm) = true;
        - script.execute: play_alarm
    turn_off_action: 
      then:
        - lambda: |-
            id(doorbell_alarm) = false;
        - script.execute: play_alarm




button:

  - platform: template
    name: "Track play"
    icon: mdi:play
    id: doorbell_Play
    on_press: 
      then:
        - script.execute: play_track

  - platform: template
    name: "Stop"
    icon: mdi:stop
    id: doorbell_Stop
    on_press: 
      then:
        - script.execute: play_reset

  - platform: template
    name: "Reset"
    icon: mdi:reload
    id: doorbell_Reset
    on_press: 
      then:
        - script.execute: play_reset




number:

  - platform: template
    id: doorbell_track
    name: "Track"
    icon: mdi:numeric
    max_value: 100
    min_value: 1
    step: 1
    mode: box
    optimistic: true
    restore_value: True
    on_value:
      then:
        - dfplayer.play: !lambda 'return x;'

  - platform: template
    name: "Track volume"
    icon: mdi:volume-high
    id: doorbell_track_volume
    max_value: 30
    min_value: 1
    step: 1
    mode: SLIDER
    optimistic: True
    restore_value: True
    device_class: VOLUME
    on_value:
      then:
        - dfplayer.set_volume: !lambda 'return x;'

  - platform: template
    id: doorbell_alarm_track
    name: "Alarm track"
    icon: mdi:numeric
    max_value: 100
    min_value: 1
    step: 1
    mode: box
    optimistic: true
    restore_value: True
    on_value:
      then:
        - dfplayer.play: !lambda 'return x;'

  - platform: template
    name: "Alarm volume"
    icon: mdi:volume-high
    id: doorbell_alarm_volume
    max_value: 30
    min_value: 1
    step: 1
    mode: SLIDER
    device_class: VOLUME
    optimistic: True
    restore_value: True
    on_value:
      then:
        - if: 
            condition: 
              lambda: 'return id(doorbell_alarm);'
            then:
              - dfplayer.set_volume: !lambda 'return x;'

  - platform: template
    id: doorbell_alarm_timeout_n
    name: "Alarm timeout"
    icon: mdi:alarm
    max_value: 600
    min_value: 10
    step: 1
    mode: box
    optimistic: true
    restore_value: True
    on_value:
      then:
        - lambda: id(doorbell_alarm_timeout) = x;




uart:
  tx_pin: GPIO2
  rx_pin: GPIO5
  baud_rate: 9600
dfplayer:
  on_finished_playback:
    then:
      logger.log: 'Playback finished event'
api:

  encryption:
    key: "UwwtZQrZFpS97dll8DtFkKij8pZ3/MFRttxagxHuWaw="

  services:
  - service: dfplayer_next
    then:
      - dfplayer.play_next:
  - service: dfplayer_previous
    then:
      - dfplayer.play_previous:
  - service: dfplayer_play
    variables:
      file: int
    then:
      - dfplayer.play: !lambda 'return file;'
  - service: dfplayer_play_loop
    variables:
      file: int
      loop_: bool
    then:
      - dfplayer.play:
          file: !lambda 'return file;'
          loop: !lambda 'return loop_;'
  
  - service: dfplayer_play_folder
    variables:
      folder: int
      file: int
    then:
      - dfplayer.play_folder:
          folder: !lambda 'return folder;'
          file: !lambda 'return file;'

  - service: dfplayer_play_loop_folder
    variables:
      folder: int
    then:
      - dfplayer.play_folder:
          folder: !lambda 'return folder;'
          loop: true

  - service: dfplayer_set_device_tf
    then:
      - dfplayer.set_device: TF_CARD

  - service: dfplayer_set_device_usb
    then:
      - dfplayer.set_device: USB

  - service: dfplayer_set_volume
    variables:
      volume: int
    then:
      - dfplayer.set_volume: !lambda 'return volume;'

  - service: dfplayer_set_eq
    variables:
      preset: int
    then:
      - dfplayer.set_eq: !lambda 'return static_cast<dfplayer::EqPreset>(preset);'

  - service: dfplayer_sleep
    then:
      - dfplayer.sleep

  - service: dfplayer_reset
    then:
      - dfplayer.reset

  - service: dfplayer_start
    then:
      - dfplayer.start

  - service: dfplayer_pause
    then:
      - dfplayer.pause

  - service: dfplayer_stop
    then:
      - dfplayer.stop

  - service: dfplayer_random
    then:
      - dfplayer.random

  - service: dfplayer_volume_up
    then:
      - dfplayer.volume_up

  - service: dfplayer_volume_down
    then:
      - dfplayer.volume_down
