esphome:
  name: pzem-004t-100a
  friendly_name: PZEM-004T-100A

esp8266:
  board: d1_mini

# Enable logging
logger:
#  level: VERBOSE
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: "RGjItH59/RoPkfHjjzDmXqdBMbr+Zwg3Lwoo8c++B58="

ota:
  - platform: esphome
    password: "ed266e6ddf79dc1345ac1bc8a7010175"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Pzem-004T-100A Hotspot"
    password: !secret wifi_password

captive_portal:

web_server:
  port: 80
  version: 3
uart:
  - id: ubus
    rx_pin: D3
    tx_pin: D4
    baud_rate: 9600
    stop_bits: 1

modbus:
  id: mbus
  uart_id: ubus

time:
  platform: homeassistant
#  platform: sntp
  id: hass_time
  on_time:
    # Every Month at specified day
    - seconds: 0
      minutes: 0
      hours: 0
      days_of_month: 1
      then:
        - sensor.integration.reset: total_energy_month #Reset power integrator
    # Every Week at specified day
    - seconds: 0
      minutes: 0
      hours: 0
      days_of_week: MON
      then:
        - sensor.integration.reset: total_energy_week #Reset power integrator
    # Every Day at specified hour
    - seconds: 0
      minutes: 0
      hours: 0
      then:
        - sensor.integration.reset: total_energy_day #Reset power integrator

button:
  - platform: template
    name: Reset counter
    id: reset_button
    icon: "mdi:emoticon-outline"
    on_press:
      - pzemac.reset_energy: pzemac_1

sensor:
  - platform: pzemac
    address: 1
    modbus_id: mbus
    id: pzemac_1
    current:
      name: "Current"
      id: pMeter_current
      accuracy_decimals: 2
      state_class: "measurement"
      icon: "mdi:current-ac"
    voltage:
      name: "Voltage"
      id: pMeter_voltage
      accuracy_decimals: 1
      device_class: "voltage"
      icon: "mdi:flash-triangle-outline"
    power:
      name: "Power"
      unit_of_measurement: W
      accuracy_decimals: 2
      id: pMeter_power
      state_class: "measurement"
      icon: "mdi:meter-electric-outline"
    frequency:
      name: "Frequency"
      unit_of_measurement: Hz
      accuracy_decimals: 2
      icon: "mdi:sine-wave"
    power_factor:
      name: "Power Factor"
      id: pMeter_power_factor
      device_class: "power_factor"
      state_class: "measurement"
      icon: "mdi:math-cos"
    energy:
      name: "Energy"
      unit_of_measurement: Wh
      accuracy_decimals: 1
      id: pMeter_energy
      state_class: "measurement"
      icon: "mdi:transmission-tower-export"
    update_interval: 5s
 ###################################################

  - platform: total_daily_energy
    name: "Total Daily Energy "
    power_id: pMeter_power
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    filters:
      - multiply: 0.001

  - platform: template
    name: "Cumulative power"
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    update_interval: 10s
    icon: mdi:meter-electric-outline
    lambda: return (( (id(pMeter_energy).state)/1000.0));

  - platform: template
    name: "Power apparente"
    id: pMeter_power_apparente
    unit_of_measurement: "VA"
    device_class: "apparent_power"
    state_class: "measurement"
    accuracy_decimals: 2
    update_interval: 10s
    icon: mdi:power
    lambda: return ( (id(pMeter_power).state/id(pMeter_power_factor).state));

  - platform: template
    name: "Power reactive"
    id: pMeter_power_reactive
    unit_of_measurement: "VAr"
    accuracy_decimals: 2
    update_interval: 10s
    icon: mdi:power
    lambda: return ( ( sqrt( (id(pMeter_power_apparente).state)*(id(pMeter_power_apparente).state)   -  (id(pMeter_power).state)*(id(pMeter_power).state) ) )  );

  - platform: integration
    name: "Total Consumption"
    id: "total_energy"
    sensor: pMeter_power
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: false #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Daily Consumption"
    id: "total_energy_day"
    sensor: pMeter_power
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: false #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Weekly Consumption"
    id: "total_energy_week"
    sensor: pMeter_power
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: false #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Monthly Consumption"
    id: "total_energy_month"
    sensor: pMeter_power
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: false #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: wifi_signal
    name: "WiFi power PMeter"
    update_interval: 10s

  - platform: uptime
    name: "up"
    id: uptime_sec 

switch:
  - platform: restart
    name: "PMeter restart"
  - platform: gpio
    pin: 
      number: D1
      inverted: true
    id: relay1
    name: "Mirror light"
    icon: "mdi:mirror-rectangle"

text_sensor:
  - platform: template
    name: PMeter uptime
    lambda: |-
      int seconds = (id(uptime_sec).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600); 
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
    icon: mdi:clock-start
    update_interval: 113s

binary_sensor:
  - platform: gpio
    pin:
      number: D2
      mode: INPUT_PULLUP
      inverted: True
    name: "Mirror Light toggle"
    icon: "mdi:gesture-tap"
    on_press:
      - switch.toggle: relay1
